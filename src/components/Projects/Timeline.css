/* src/components/Timeline.css */
:root {
  /* tweak these two to control everything */
  --branch-length: 6rem;
  --branch-gap:    2rem;
}

.App {
  /* make your container fill the screen... */
  width: 100vw;
  height: 100vh;
  /* ensure it’s the clipping context */
  position: relative;
}

/*pakodi*/
/*-----------------------------MAIN TIMELINE CODE ---------------------------*/

.timeline {
  position: relative;
  padding: 4rem 0;
  width: 90%;
  max-width: none;
  margin: 0 auto;
  transform: translateY(1.5rem); /* this is for moving the timeline a tad bit down*/
  --rail-offset: 0%;              /* default */
  transition: --rail-offset 0.35s ease;   /* animates smoothly */
}

/*------This part is for the straight loading timeline-------*/ 
.timeline::before {
  content: '';
  position: absolute;
  left: 50%;
  top: 0;
  bottom: calc(6rem + 0.625rem + 4px);
  width: 4px;
  background: #7CFC00;           /* neon green */
  transform-origin: top center;  /* pivot at the top */
  transform: translateX(-50%) scaleY(0);
  animation: growLine 1s ease-out forwards;
}


/* animate only the rail */
@keyframes growLine {
  to {
    transform: translateX(-50%) scaleY(1);
  }
}

/*------------------------end timeline load-----------------------------*/

.timeline-item {
  position: relative;
  display: flex;
  align-items: center;
  margin: 6rem 0;
  cursor: pointer; /* Make the whole item clickable and change cursor */
}

/*------------------------content open-----------------------------*/

.content.open {
  display: flex;
  flex-direction: row;
  width: clamp(22rem, 40vw, 48rem);
}

.text-stack { flex: 1 1 auto; }
.demo-wrapper {
  flex: 0 0 70%;
  margin-left: auto;
}

/* ---------- handwritten demo widget ---------- */

/*"Clear" and "Predict" buttons code*/
.hdemo {
  display: flex;
  flex-direction: column;
  align-items: center;
}
/* Button alignment */
.hdemo-btns {
  margin-top: 0.5rem;
  display: flex;
  gap: 0.5rem;
}

/* Buttons CSS design */
.hdemo-btns button {
  padding: 0.25rem 0.75rem;
  border-radius: 0.25rem;
  border: 1px solid #7cfc00;
  background: transparent;
  color: #7cfc00;
  cursor: pointer;
}

/* The canvas code */
.hdemo-canvas {
  border: 2px solid #7cfc00;
  border-radius: 0.5rem;
  background: black;
  touch-action: none;           /* smoother drawing on touch */
}
/* ------------------ end ----------------------- */

/* ---------- icon bar bottom‑right ------------- */
.icon-bar {
  position: absolute;
  bottom: 0.4rem;
  right: 0.4rem;
  display: flex;
  gap: 0.4rem;
}
.demo-btn {
  background: none;
  border: none;
  cursor: pointer;
  color: #59b102;
}

/*--------------------------------BRANCH LINE CODE----------------------------------*/

/* --- branch styling & animation --- */
.branch {
  position: absolute;
  top: 50%;   
  /* start just outside the right edge of the circle: */
  left: calc(50% + 0.40rem + 4px);
  width: 0;                   
  height: 4px;
  background: #7CFC00;
  transform-origin: left center;
  animation: branchGrow 0.5s ease-out forwards;
}

/* for those “reversed” items, mirror it on the right side */
.timeline-item:nth-child(even) .branch {
  left: auto;
  right: calc(50% + 0.40rem + 4px);
  transform-origin: right center;
}

/* 1) common animation + centering for every .content */
.timeline-item:nth-child(odd)  .content,
.timeline-item:nth-child(even) .content {
  animation-duration: 0.6s;
  animation-timing-function: ease-out;
  animation-fill-mode: forwards;
  animation-delay: 0.5s;
  text-align: center;
}

/* 2) pick the right fade based on odd/even */
.timeline-item:nth-child(odd)  .content { animation-name: fadeRight; }
.timeline-item:nth-child(even) .content { animation-name: fadeLeft;  }

/* 3) “flush to branch” margins */
/* odd → sit to the right of the spine */
.timeline-item:nth-child(odd)  .content {
  margin-left:  calc(50% + var(--branch-length) + 1rem);
  margin-right: auto;
}
/* even → sit to the left */
.timeline-item:nth-child(even) .content {
  margin-left: auto;
  margin-right: calc(50% + var(--branch-length) + 1rem);
}

/* 4) flip the flex order for odd items */
.timeline-item:nth-child(odd) {
  flex-direction: row-reverse;
}

/* match the length of your static offset */
/* timeline-item branchGrow keyframes */
@keyframes branchGrow {
  to { width: var(--branch-length); }
}

/* the circular markers on the timeline */
.marker {
  position: absolute;
  left: 50%;
  width: 1.5rem;
  height: 1.5rem;
  background: black;
  border: 4px solid #7CFC00;
  border-radius: 50%;
  transform: translateX(-50%);
}

/* make your card a column‑flex box that truly centers its children */
.content {
  /* fixed size or min‑size to your taste */
  width: 20rem;
  min-height: 6rem;
  opacity: 0; /* Now fade & slide the content in after the branch is done */

  /* padding counts inside the box */
  box-sizing: border-box;
  padding: 1rem;

  /* center everything, stacked vertically */
  display: flex;
  justify-content: center;  /* vertical centering */

  text-align: center;
  background: rgba(255,255,255,0.1);
  border-radius: 0.5rem;
  overflow: hidden;
}

/*--------------------------- Fades animations ---------------------------------- */

/* simple fade‑in animation */
@keyframes fadeInUp {
  to {
    opacity: 1;
    transform: none;
  }
}

/* Define the two directional fades */
@keyframes fadeRight {
  0% {
    opacity: 0;
    transform: translateX(-30px);
  }
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes fadeLeft {
  0% {
    opacity: 0;
    transform: translateX(30px);
  }
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

/* 1) define fadeDown (starts 30px above, then drops into place) */
@keyframes fadeDown {
  0% {
    opacity: 0;
    transform: translateY(-30px);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

/*--------------------------------MOBILE CODE START----------------------------------*/
@media (max-width: 600px) {
  /* === MOBILE (≤ 600 px) – vertical-rail layout ===================== */

  /* 1. kill only the side arms */
  .branch, .marker { display: none; }

  /* 3) stack & center your cards under that rail */
  .timeline-item {
    display: flex !important;
    flex-direction: column !important;
    align-items: center !important;
  }
  .content {
    margin: 1rem auto !important;
    width: calc(100% - 2rem) !important;
    text-align: left;
  }

  .timeline   { position: relative; }
  .timeline::before { z-index: -1 !important; }
  .timeline-item .content {
    position: relative;
    background:#1a1a1a !important;
    z-index: 1 !important;
  }

  /* 2) if you still see desktop nth-child rules, neutralize them */
  .timeline-item:nth-child(odd)  .content,
  .timeline-item:nth-child(even) .content {
    animation-name: fadeDown !important;
    animation-delay: var(--delay, 0s);
  }

  /* 1) force a single‐column layout for every item */
  .timeline-item,
  .timeline-item:nth-child(odd),
  .timeline-item:nth-child(even) {
    display: flex !important;
    flex-direction: column !important;
    align-items: flex-start; /* or center, if you prefer */
  }

  /* 2) reset all the odd/even margins so cards just stack under the rail */
  .timeline-item .content {
    margin: 0 auto !important;
    width: calc(100% - 2rem); /* or whatever your mobile width is */
  }

  /* 3) (optional) if you’d rather block‐render, you can ditch flex entirely: */
  .timeline-item { display: block !important; 
  }

  /* make the clickable target larger */
  .demo-btn {
    padding: 0rem 0.5rem;    /* more breathing room */
    border-radius: 0.4rem;     /* slightly rounder corners */
  }

  /* enlarge the lucide-react <svg> icon inside the button */
  .demo-btn svg {
    width: 2rem;              /* default is ~1em; tweak to taste */
    height: 2rem;
  }
}
/*--------------------------------MOBILE CODE END----------------------------------*/